Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instruction_list label_list
Rule 2     instruction_list -> instruction_list instruction
Rule 3     instruction_list -> <empty>
Rule 4     instruction -> label_list three_address_instruction
Rule 5     three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE
Rule 6     three_address_instruction -> LENGTH ASSIGN NUM
Rule 7     numlist -> NUM COMMA numlist
Rule 8     numlist -> NUM
Rule 9     numlist -> <empty>
Rule 10    three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE
Rule 11    three_address_instruction -> lhs ASSIGN operand
Rule 12    three_address_instruction -> lhs ASSIGN MINUS operand
Rule 13    three_address_instruction -> lhs ASSIGN UNARYNOT operand
Rule 14    three_address_instruction -> lhs ASSIGN operand PLUS operand
Rule 15    three_address_instruction -> lhs ASSIGN operand MINUS operand
Rule 16    three_address_instruction -> lhs ASSIGN operand TIMES operand
Rule 17    three_address_instruction -> lhs ASSIGN operand DIVIDE operand
Rule 18    three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand
Rule 19    three_address_instruction -> lhs ASSIGN operand LESSTHAN operand
Rule 20    three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand
Rule 21    three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand
Rule 22    three_address_instruction -> lhs ASSIGN operand EQUALTO operand
Rule 23    three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand
Rule 24    three_address_instruction -> lhs ASSIGN operand AND operand
Rule 25    three_address_instruction -> lhs ASSIGN operand OR operand
Rule 26    three_address_instruction -> IFFALSE ID GOTO ID
Rule 27    three_address_instruction -> ELSE GOTO ID
Rule 28    three_address_instruction -> WRITE operand
Rule 29    three_address_instruction -> READ lhs
Rule 30    label_list -> label_list label
Rule 31    label_list -> <empty>
Rule 32    lhs -> ID
Rule 33    operand -> ID
Rule 34    operand -> NUM
Rule 35    label -> ID COLON

Terminals, with rules where they appear

AND                  : 24
ASSIGN               : 5 6 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
COLON                : 35
COMMA                : 7
DIVIDE               : 17
ELSE                 : 27
EQUALTO              : 22
GOTO                 : 26 27
GREATEQUAL           : 20
GREATERTHAN          : 18
ID                   : 5 10 26 26 27 32 33 35
IFFALSE              : 26
LENGTH               : 6
LESSEQUAL            : 21
LESSTHAN             : 19
LSQUARE              : 5 10
MINUS                : 12 15
NOTEQUAL             : 23
NUM                  : 6 7 8 10 34
OR                   : 25
PLUS                 : 14
READ                 : 29
RSQUARE              : 5 10
TIMES                : 16
UNARYNOT             : 13
WRITE                : 28
error                : 

Nonterminals, with rules where they appear

instruction          : 2
instruction_list     : 1 2
label                : 30
label_list           : 1 4 30
lhs                  : 5 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 29
numlist              : 5 7
operand              : 11 12 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 28
program              : 0
three_address_instruction : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instruction_list label_list
    (2) instruction_list -> . instruction_list instruction
    (3) instruction_list -> .

    ID              reduce using rule 3 (instruction_list -> .)
    LENGTH          reduce using rule 3 (instruction_list -> .)
    IFFALSE         reduce using rule 3 (instruction_list -> .)
    ELSE            reduce using rule 3 (instruction_list -> .)
    WRITE           reduce using rule 3 (instruction_list -> .)
    READ            reduce using rule 3 (instruction_list -> .)
    $end            reduce using rule 3 (instruction_list -> .)

    program                        shift and go to state 1
    instruction_list               shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> instruction_list . label_list
    (2) instruction_list -> instruction_list . instruction
    (30) label_list -> . label_list label
    (31) label_list -> .
    (4) instruction -> . label_list three_address_instruction

    ID              reduce using rule 31 (label_list -> .)
    LENGTH          reduce using rule 31 (label_list -> .)
    IFFALSE         reduce using rule 31 (label_list -> .)
    ELSE            reduce using rule 31 (label_list -> .)
    WRITE           reduce using rule 31 (label_list -> .)
    READ            reduce using rule 31 (label_list -> .)
    $end            reduce using rule 31 (label_list -> .)

    label_list                     shift and go to state 3
    instruction                    shift and go to state 4

state 3

    (1) program -> instruction_list label_list .
    (30) label_list -> label_list . label
    (4) instruction -> label_list . three_address_instruction
    (35) label -> . ID COLON
    (5) three_address_instruction -> . lhs ASSIGN ID LSQUARE numlist RSQUARE
    (6) three_address_instruction -> . LENGTH ASSIGN NUM
    (10) three_address_instruction -> . lhs ASSIGN ID LSQUARE NUM RSQUARE
    (11) three_address_instruction -> . lhs ASSIGN operand
    (12) three_address_instruction -> . lhs ASSIGN MINUS operand
    (13) three_address_instruction -> . lhs ASSIGN UNARYNOT operand
    (14) three_address_instruction -> . lhs ASSIGN operand PLUS operand
    (15) three_address_instruction -> . lhs ASSIGN operand MINUS operand
    (16) three_address_instruction -> . lhs ASSIGN operand TIMES operand
    (17) three_address_instruction -> . lhs ASSIGN operand DIVIDE operand
    (18) three_address_instruction -> . lhs ASSIGN operand GREATERTHAN operand
    (19) three_address_instruction -> . lhs ASSIGN operand LESSTHAN operand
    (20) three_address_instruction -> . lhs ASSIGN operand GREATEQUAL operand
    (21) three_address_instruction -> . lhs ASSIGN operand LESSEQUAL operand
    (22) three_address_instruction -> . lhs ASSIGN operand EQUALTO operand
    (23) three_address_instruction -> . lhs ASSIGN operand NOTEQUAL operand
    (24) three_address_instruction -> . lhs ASSIGN operand AND operand
    (25) three_address_instruction -> . lhs ASSIGN operand OR operand
    (26) three_address_instruction -> . IFFALSE ID GOTO ID
    (27) three_address_instruction -> . ELSE GOTO ID
    (28) three_address_instruction -> . WRITE operand
    (29) three_address_instruction -> . READ lhs
    (32) lhs -> . ID

    $end            reduce using rule 1 (program -> instruction_list label_list .)
    ID              shift and go to state 7
    LENGTH          shift and go to state 9
    IFFALSE         shift and go to state 10
    ELSE            shift and go to state 11
    WRITE           shift and go to state 12
    READ            shift and go to state 13

    label                          shift and go to state 5
    three_address_instruction      shift and go to state 6
    lhs                            shift and go to state 8

state 4

    (2) instruction_list -> instruction_list instruction .

    ID              reduce using rule 2 (instruction_list -> instruction_list instruction .)
    LENGTH          reduce using rule 2 (instruction_list -> instruction_list instruction .)
    IFFALSE         reduce using rule 2 (instruction_list -> instruction_list instruction .)
    ELSE            reduce using rule 2 (instruction_list -> instruction_list instruction .)
    WRITE           reduce using rule 2 (instruction_list -> instruction_list instruction .)
    READ            reduce using rule 2 (instruction_list -> instruction_list instruction .)
    $end            reduce using rule 2 (instruction_list -> instruction_list instruction .)


state 5

    (30) label_list -> label_list label .

    ID              reduce using rule 30 (label_list -> label_list label .)
    LENGTH          reduce using rule 30 (label_list -> label_list label .)
    IFFALSE         reduce using rule 30 (label_list -> label_list label .)
    ELSE            reduce using rule 30 (label_list -> label_list label .)
    WRITE           reduce using rule 30 (label_list -> label_list label .)
    READ            reduce using rule 30 (label_list -> label_list label .)
    $end            reduce using rule 30 (label_list -> label_list label .)


state 6

    (4) instruction -> label_list three_address_instruction .

    ID              reduce using rule 4 (instruction -> label_list three_address_instruction .)
    LENGTH          reduce using rule 4 (instruction -> label_list three_address_instruction .)
    IFFALSE         reduce using rule 4 (instruction -> label_list three_address_instruction .)
    ELSE            reduce using rule 4 (instruction -> label_list three_address_instruction .)
    WRITE           reduce using rule 4 (instruction -> label_list three_address_instruction .)
    READ            reduce using rule 4 (instruction -> label_list three_address_instruction .)
    $end            reduce using rule 4 (instruction -> label_list three_address_instruction .)


state 7

    (35) label -> ID . COLON
    (32) lhs -> ID .

    COLON           shift and go to state 14
    ASSIGN          reduce using rule 32 (lhs -> ID .)


state 8

    (5) three_address_instruction -> lhs . ASSIGN ID LSQUARE numlist RSQUARE
    (10) three_address_instruction -> lhs . ASSIGN ID LSQUARE NUM RSQUARE
    (11) three_address_instruction -> lhs . ASSIGN operand
    (12) three_address_instruction -> lhs . ASSIGN MINUS operand
    (13) three_address_instruction -> lhs . ASSIGN UNARYNOT operand
    (14) three_address_instruction -> lhs . ASSIGN operand PLUS operand
    (15) three_address_instruction -> lhs . ASSIGN operand MINUS operand
    (16) three_address_instruction -> lhs . ASSIGN operand TIMES operand
    (17) three_address_instruction -> lhs . ASSIGN operand DIVIDE operand
    (18) three_address_instruction -> lhs . ASSIGN operand GREATERTHAN operand
    (19) three_address_instruction -> lhs . ASSIGN operand LESSTHAN operand
    (20) three_address_instruction -> lhs . ASSIGN operand GREATEQUAL operand
    (21) three_address_instruction -> lhs . ASSIGN operand LESSEQUAL operand
    (22) three_address_instruction -> lhs . ASSIGN operand EQUALTO operand
    (23) three_address_instruction -> lhs . ASSIGN operand NOTEQUAL operand
    (24) three_address_instruction -> lhs . ASSIGN operand AND operand
    (25) three_address_instruction -> lhs . ASSIGN operand OR operand

    ASSIGN          shift and go to state 15


state 9

    (6) three_address_instruction -> LENGTH . ASSIGN NUM

    ASSIGN          shift and go to state 16


state 10

    (26) three_address_instruction -> IFFALSE . ID GOTO ID

    ID              shift and go to state 17


state 11

    (27) three_address_instruction -> ELSE . GOTO ID

    GOTO            shift and go to state 18


state 12

    (28) three_address_instruction -> WRITE . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 19

state 13

    (29) three_address_instruction -> READ . lhs
    (32) lhs -> . ID

    ID              shift and go to state 23

    lhs                            shift and go to state 22

state 14

    (35) label -> ID COLON .

    ID              reduce using rule 35 (label -> ID COLON .)
    LENGTH          reduce using rule 35 (label -> ID COLON .)
    IFFALSE         reduce using rule 35 (label -> ID COLON .)
    ELSE            reduce using rule 35 (label -> ID COLON .)
    WRITE           reduce using rule 35 (label -> ID COLON .)
    READ            reduce using rule 35 (label -> ID COLON .)
    $end            reduce using rule 35 (label -> ID COLON .)


state 15

    (5) three_address_instruction -> lhs ASSIGN . ID LSQUARE numlist RSQUARE
    (10) three_address_instruction -> lhs ASSIGN . ID LSQUARE NUM RSQUARE
    (11) three_address_instruction -> lhs ASSIGN . operand
    (12) three_address_instruction -> lhs ASSIGN . MINUS operand
    (13) three_address_instruction -> lhs ASSIGN . UNARYNOT operand
    (14) three_address_instruction -> lhs ASSIGN . operand PLUS operand
    (15) three_address_instruction -> lhs ASSIGN . operand MINUS operand
    (16) three_address_instruction -> lhs ASSIGN . operand TIMES operand
    (17) three_address_instruction -> lhs ASSIGN . operand DIVIDE operand
    (18) three_address_instruction -> lhs ASSIGN . operand GREATERTHAN operand
    (19) three_address_instruction -> lhs ASSIGN . operand LESSTHAN operand
    (20) three_address_instruction -> lhs ASSIGN . operand GREATEQUAL operand
    (21) three_address_instruction -> lhs ASSIGN . operand LESSEQUAL operand
    (22) three_address_instruction -> lhs ASSIGN . operand EQUALTO operand
    (23) three_address_instruction -> lhs ASSIGN . operand NOTEQUAL operand
    (24) three_address_instruction -> lhs ASSIGN . operand AND operand
    (25) three_address_instruction -> lhs ASSIGN . operand OR operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 24
    MINUS           shift and go to state 26
    UNARYNOT        shift and go to state 27
    NUM             shift and go to state 21

    operand                        shift and go to state 25

state 16

    (6) three_address_instruction -> LENGTH ASSIGN . NUM

    NUM             shift and go to state 28


state 17

    (26) three_address_instruction -> IFFALSE ID . GOTO ID

    GOTO            shift and go to state 29


state 18

    (27) three_address_instruction -> ELSE GOTO . ID

    ID              shift and go to state 30


state 19

    (28) three_address_instruction -> WRITE operand .

    ID              reduce using rule 28 (three_address_instruction -> WRITE operand .)
    LENGTH          reduce using rule 28 (three_address_instruction -> WRITE operand .)
    IFFALSE         reduce using rule 28 (three_address_instruction -> WRITE operand .)
    ELSE            reduce using rule 28 (three_address_instruction -> WRITE operand .)
    WRITE           reduce using rule 28 (three_address_instruction -> WRITE operand .)
    READ            reduce using rule 28 (three_address_instruction -> WRITE operand .)
    $end            reduce using rule 28 (three_address_instruction -> WRITE operand .)


state 20

    (33) operand -> ID .

    ID              reduce using rule 33 (operand -> ID .)
    LENGTH          reduce using rule 33 (operand -> ID .)
    IFFALSE         reduce using rule 33 (operand -> ID .)
    ELSE            reduce using rule 33 (operand -> ID .)
    WRITE           reduce using rule 33 (operand -> ID .)
    READ            reduce using rule 33 (operand -> ID .)
    $end            reduce using rule 33 (operand -> ID .)


state 21

    (34) operand -> NUM .

    ID              reduce using rule 34 (operand -> NUM .)
    LENGTH          reduce using rule 34 (operand -> NUM .)
    IFFALSE         reduce using rule 34 (operand -> NUM .)
    ELSE            reduce using rule 34 (operand -> NUM .)
    WRITE           reduce using rule 34 (operand -> NUM .)
    READ            reduce using rule 34 (operand -> NUM .)
    $end            reduce using rule 34 (operand -> NUM .)
    PLUS            reduce using rule 34 (operand -> NUM .)
    MINUS           reduce using rule 34 (operand -> NUM .)
    TIMES           reduce using rule 34 (operand -> NUM .)
    DIVIDE          reduce using rule 34 (operand -> NUM .)
    GREATERTHAN     reduce using rule 34 (operand -> NUM .)
    LESSTHAN        reduce using rule 34 (operand -> NUM .)
    GREATEQUAL      reduce using rule 34 (operand -> NUM .)
    LESSEQUAL       reduce using rule 34 (operand -> NUM .)
    EQUALTO         reduce using rule 34 (operand -> NUM .)
    NOTEQUAL        reduce using rule 34 (operand -> NUM .)
    AND             reduce using rule 34 (operand -> NUM .)
    OR              reduce using rule 34 (operand -> NUM .)


state 22

    (29) three_address_instruction -> READ lhs .

    ID              reduce using rule 29 (three_address_instruction -> READ lhs .)
    LENGTH          reduce using rule 29 (three_address_instruction -> READ lhs .)
    IFFALSE         reduce using rule 29 (three_address_instruction -> READ lhs .)
    ELSE            reduce using rule 29 (three_address_instruction -> READ lhs .)
    WRITE           reduce using rule 29 (three_address_instruction -> READ lhs .)
    READ            reduce using rule 29 (three_address_instruction -> READ lhs .)
    $end            reduce using rule 29 (three_address_instruction -> READ lhs .)


state 23

    (32) lhs -> ID .

    ID              reduce using rule 32 (lhs -> ID .)
    LENGTH          reduce using rule 32 (lhs -> ID .)
    IFFALSE         reduce using rule 32 (lhs -> ID .)
    ELSE            reduce using rule 32 (lhs -> ID .)
    WRITE           reduce using rule 32 (lhs -> ID .)
    READ            reduce using rule 32 (lhs -> ID .)
    $end            reduce using rule 32 (lhs -> ID .)


state 24

    (5) three_address_instruction -> lhs ASSIGN ID . LSQUARE numlist RSQUARE
    (10) three_address_instruction -> lhs ASSIGN ID . LSQUARE NUM RSQUARE
    (33) operand -> ID .

    LSQUARE         shift and go to state 31
    PLUS            reduce using rule 33 (operand -> ID .)
    MINUS           reduce using rule 33 (operand -> ID .)
    TIMES           reduce using rule 33 (operand -> ID .)
    DIVIDE          reduce using rule 33 (operand -> ID .)
    GREATERTHAN     reduce using rule 33 (operand -> ID .)
    LESSTHAN        reduce using rule 33 (operand -> ID .)
    GREATEQUAL      reduce using rule 33 (operand -> ID .)
    LESSEQUAL       reduce using rule 33 (operand -> ID .)
    EQUALTO         reduce using rule 33 (operand -> ID .)
    NOTEQUAL        reduce using rule 33 (operand -> ID .)
    AND             reduce using rule 33 (operand -> ID .)
    OR              reduce using rule 33 (operand -> ID .)
    ID              reduce using rule 33 (operand -> ID .)
    LENGTH          reduce using rule 33 (operand -> ID .)
    IFFALSE         reduce using rule 33 (operand -> ID .)
    ELSE            reduce using rule 33 (operand -> ID .)
    WRITE           reduce using rule 33 (operand -> ID .)
    READ            reduce using rule 33 (operand -> ID .)
    $end            reduce using rule 33 (operand -> ID .)


state 25

    (11) three_address_instruction -> lhs ASSIGN operand .
    (14) three_address_instruction -> lhs ASSIGN operand . PLUS operand
    (15) three_address_instruction -> lhs ASSIGN operand . MINUS operand
    (16) three_address_instruction -> lhs ASSIGN operand . TIMES operand
    (17) three_address_instruction -> lhs ASSIGN operand . DIVIDE operand
    (18) three_address_instruction -> lhs ASSIGN operand . GREATERTHAN operand
    (19) three_address_instruction -> lhs ASSIGN operand . LESSTHAN operand
    (20) three_address_instruction -> lhs ASSIGN operand . GREATEQUAL operand
    (21) three_address_instruction -> lhs ASSIGN operand . LESSEQUAL operand
    (22) three_address_instruction -> lhs ASSIGN operand . EQUALTO operand
    (23) three_address_instruction -> lhs ASSIGN operand . NOTEQUAL operand
    (24) three_address_instruction -> lhs ASSIGN operand . AND operand
    (25) three_address_instruction -> lhs ASSIGN operand . OR operand

    ID              reduce using rule 11 (three_address_instruction -> lhs ASSIGN operand .)
    LENGTH          reduce using rule 11 (three_address_instruction -> lhs ASSIGN operand .)
    IFFALSE         reduce using rule 11 (three_address_instruction -> lhs ASSIGN operand .)
    ELSE            reduce using rule 11 (three_address_instruction -> lhs ASSIGN operand .)
    WRITE           reduce using rule 11 (three_address_instruction -> lhs ASSIGN operand .)
    READ            reduce using rule 11 (three_address_instruction -> lhs ASSIGN operand .)
    $end            reduce using rule 11 (three_address_instruction -> lhs ASSIGN operand .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    GREATERTHAN     shift and go to state 36
    LESSTHAN        shift and go to state 37
    GREATEQUAL      shift and go to state 38
    LESSEQUAL       shift and go to state 39
    EQUALTO         shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 26

    (12) three_address_instruction -> lhs ASSIGN MINUS . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 44

state 27

    (13) three_address_instruction -> lhs ASSIGN UNARYNOT . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 45

state 28

    (6) three_address_instruction -> LENGTH ASSIGN NUM .

    ID              reduce using rule 6 (three_address_instruction -> LENGTH ASSIGN NUM .)
    LENGTH          reduce using rule 6 (three_address_instruction -> LENGTH ASSIGN NUM .)
    IFFALSE         reduce using rule 6 (three_address_instruction -> LENGTH ASSIGN NUM .)
    ELSE            reduce using rule 6 (three_address_instruction -> LENGTH ASSIGN NUM .)
    WRITE           reduce using rule 6 (three_address_instruction -> LENGTH ASSIGN NUM .)
    READ            reduce using rule 6 (three_address_instruction -> LENGTH ASSIGN NUM .)
    $end            reduce using rule 6 (three_address_instruction -> LENGTH ASSIGN NUM .)


state 29

    (26) three_address_instruction -> IFFALSE ID GOTO . ID

    ID              shift and go to state 46


state 30

    (27) three_address_instruction -> ELSE GOTO ID .

    ID              reduce using rule 27 (three_address_instruction -> ELSE GOTO ID .)
    LENGTH          reduce using rule 27 (three_address_instruction -> ELSE GOTO ID .)
    IFFALSE         reduce using rule 27 (three_address_instruction -> ELSE GOTO ID .)
    ELSE            reduce using rule 27 (three_address_instruction -> ELSE GOTO ID .)
    WRITE           reduce using rule 27 (three_address_instruction -> ELSE GOTO ID .)
    READ            reduce using rule 27 (three_address_instruction -> ELSE GOTO ID .)
    $end            reduce using rule 27 (three_address_instruction -> ELSE GOTO ID .)


state 31

    (5) three_address_instruction -> lhs ASSIGN ID LSQUARE . numlist RSQUARE
    (10) three_address_instruction -> lhs ASSIGN ID LSQUARE . NUM RSQUARE
    (7) numlist -> . NUM COMMA numlist
    (8) numlist -> . NUM
    (9) numlist -> .

    NUM             shift and go to state 48
    RSQUARE         reduce using rule 9 (numlist -> .)

    numlist                        shift and go to state 47

state 32

    (14) three_address_instruction -> lhs ASSIGN operand PLUS . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 49

state 33

    (15) three_address_instruction -> lhs ASSIGN operand MINUS . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 50

state 34

    (16) three_address_instruction -> lhs ASSIGN operand TIMES . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 51

state 35

    (17) three_address_instruction -> lhs ASSIGN operand DIVIDE . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 52

state 36

    (18) three_address_instruction -> lhs ASSIGN operand GREATERTHAN . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 53

state 37

    (19) three_address_instruction -> lhs ASSIGN operand LESSTHAN . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 54

state 38

    (20) three_address_instruction -> lhs ASSIGN operand GREATEQUAL . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 55

state 39

    (21) three_address_instruction -> lhs ASSIGN operand LESSEQUAL . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 56

state 40

    (22) three_address_instruction -> lhs ASSIGN operand EQUALTO . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 57

state 41

    (23) three_address_instruction -> lhs ASSIGN operand NOTEQUAL . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 58

state 42

    (24) three_address_instruction -> lhs ASSIGN operand AND . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 59

state 43

    (25) three_address_instruction -> lhs ASSIGN operand OR . operand
    (33) operand -> . ID
    (34) operand -> . NUM

    ID              shift and go to state 20
    NUM             shift and go to state 21

    operand                        shift and go to state 60

state 44

    (12) three_address_instruction -> lhs ASSIGN MINUS operand .

    ID              reduce using rule 12 (three_address_instruction -> lhs ASSIGN MINUS operand .)
    LENGTH          reduce using rule 12 (three_address_instruction -> lhs ASSIGN MINUS operand .)
    IFFALSE         reduce using rule 12 (three_address_instruction -> lhs ASSIGN MINUS operand .)
    ELSE            reduce using rule 12 (three_address_instruction -> lhs ASSIGN MINUS operand .)
    WRITE           reduce using rule 12 (three_address_instruction -> lhs ASSIGN MINUS operand .)
    READ            reduce using rule 12 (three_address_instruction -> lhs ASSIGN MINUS operand .)
    $end            reduce using rule 12 (three_address_instruction -> lhs ASSIGN MINUS operand .)


state 45

    (13) three_address_instruction -> lhs ASSIGN UNARYNOT operand .

    ID              reduce using rule 13 (three_address_instruction -> lhs ASSIGN UNARYNOT operand .)
    LENGTH          reduce using rule 13 (three_address_instruction -> lhs ASSIGN UNARYNOT operand .)
    IFFALSE         reduce using rule 13 (three_address_instruction -> lhs ASSIGN UNARYNOT operand .)
    ELSE            reduce using rule 13 (three_address_instruction -> lhs ASSIGN UNARYNOT operand .)
    WRITE           reduce using rule 13 (three_address_instruction -> lhs ASSIGN UNARYNOT operand .)
    READ            reduce using rule 13 (three_address_instruction -> lhs ASSIGN UNARYNOT operand .)
    $end            reduce using rule 13 (three_address_instruction -> lhs ASSIGN UNARYNOT operand .)


state 46

    (26) three_address_instruction -> IFFALSE ID GOTO ID .

    ID              reduce using rule 26 (three_address_instruction -> IFFALSE ID GOTO ID .)
    LENGTH          reduce using rule 26 (three_address_instruction -> IFFALSE ID GOTO ID .)
    IFFALSE         reduce using rule 26 (three_address_instruction -> IFFALSE ID GOTO ID .)
    ELSE            reduce using rule 26 (three_address_instruction -> IFFALSE ID GOTO ID .)
    WRITE           reduce using rule 26 (three_address_instruction -> IFFALSE ID GOTO ID .)
    READ            reduce using rule 26 (three_address_instruction -> IFFALSE ID GOTO ID .)
    $end            reduce using rule 26 (three_address_instruction -> IFFALSE ID GOTO ID .)


state 47

    (5) three_address_instruction -> lhs ASSIGN ID LSQUARE numlist . RSQUARE

    RSQUARE         shift and go to state 61


state 48

    (10) three_address_instruction -> lhs ASSIGN ID LSQUARE NUM . RSQUARE
    (7) numlist -> NUM . COMMA numlist
    (8) numlist -> NUM .

  ! shift/reduce conflict for RSQUARE resolved as shift
    RSQUARE         shift and go to state 62
    COMMA           shift and go to state 63

  ! RSQUARE         [ reduce using rule 8 (numlist -> NUM .) ]


state 49

    (14) three_address_instruction -> lhs ASSIGN operand PLUS operand .

    ID              reduce using rule 14 (three_address_instruction -> lhs ASSIGN operand PLUS operand .)
    LENGTH          reduce using rule 14 (three_address_instruction -> lhs ASSIGN operand PLUS operand .)
    IFFALSE         reduce using rule 14 (three_address_instruction -> lhs ASSIGN operand PLUS operand .)
    ELSE            reduce using rule 14 (three_address_instruction -> lhs ASSIGN operand PLUS operand .)
    WRITE           reduce using rule 14 (three_address_instruction -> lhs ASSIGN operand PLUS operand .)
    READ            reduce using rule 14 (three_address_instruction -> lhs ASSIGN operand PLUS operand .)
    $end            reduce using rule 14 (three_address_instruction -> lhs ASSIGN operand PLUS operand .)


state 50

    (15) three_address_instruction -> lhs ASSIGN operand MINUS operand .

    ID              reduce using rule 15 (three_address_instruction -> lhs ASSIGN operand MINUS operand .)
    LENGTH          reduce using rule 15 (three_address_instruction -> lhs ASSIGN operand MINUS operand .)
    IFFALSE         reduce using rule 15 (three_address_instruction -> lhs ASSIGN operand MINUS operand .)
    ELSE            reduce using rule 15 (three_address_instruction -> lhs ASSIGN operand MINUS operand .)
    WRITE           reduce using rule 15 (three_address_instruction -> lhs ASSIGN operand MINUS operand .)
    READ            reduce using rule 15 (three_address_instruction -> lhs ASSIGN operand MINUS operand .)
    $end            reduce using rule 15 (three_address_instruction -> lhs ASSIGN operand MINUS operand .)


state 51

    (16) three_address_instruction -> lhs ASSIGN operand TIMES operand .

    ID              reduce using rule 16 (three_address_instruction -> lhs ASSIGN operand TIMES operand .)
    LENGTH          reduce using rule 16 (three_address_instruction -> lhs ASSIGN operand TIMES operand .)
    IFFALSE         reduce using rule 16 (three_address_instruction -> lhs ASSIGN operand TIMES operand .)
    ELSE            reduce using rule 16 (three_address_instruction -> lhs ASSIGN operand TIMES operand .)
    WRITE           reduce using rule 16 (three_address_instruction -> lhs ASSIGN operand TIMES operand .)
    READ            reduce using rule 16 (three_address_instruction -> lhs ASSIGN operand TIMES operand .)
    $end            reduce using rule 16 (three_address_instruction -> lhs ASSIGN operand TIMES operand .)


state 52

    (17) three_address_instruction -> lhs ASSIGN operand DIVIDE operand .

    ID              reduce using rule 17 (three_address_instruction -> lhs ASSIGN operand DIVIDE operand .)
    LENGTH          reduce using rule 17 (three_address_instruction -> lhs ASSIGN operand DIVIDE operand .)
    IFFALSE         reduce using rule 17 (three_address_instruction -> lhs ASSIGN operand DIVIDE operand .)
    ELSE            reduce using rule 17 (three_address_instruction -> lhs ASSIGN operand DIVIDE operand .)
    WRITE           reduce using rule 17 (three_address_instruction -> lhs ASSIGN operand DIVIDE operand .)
    READ            reduce using rule 17 (three_address_instruction -> lhs ASSIGN operand DIVIDE operand .)
    $end            reduce using rule 17 (three_address_instruction -> lhs ASSIGN operand DIVIDE operand .)


state 53

    (18) three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .

    ID              reduce using rule 18 (three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .)
    LENGTH          reduce using rule 18 (three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .)
    IFFALSE         reduce using rule 18 (three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .)
    ELSE            reduce using rule 18 (three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .)
    WRITE           reduce using rule 18 (three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .)
    READ            reduce using rule 18 (three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .)
    $end            reduce using rule 18 (three_address_instruction -> lhs ASSIGN operand GREATERTHAN operand .)


state 54

    (19) three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .

    ID              reduce using rule 19 (three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .)
    LENGTH          reduce using rule 19 (three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .)
    IFFALSE         reduce using rule 19 (three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .)
    ELSE            reduce using rule 19 (three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .)
    WRITE           reduce using rule 19 (three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .)
    READ            reduce using rule 19 (three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .)
    $end            reduce using rule 19 (three_address_instruction -> lhs ASSIGN operand LESSTHAN operand .)


state 55

    (20) three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .

    ID              reduce using rule 20 (three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .)
    LENGTH          reduce using rule 20 (three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .)
    IFFALSE         reduce using rule 20 (three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .)
    ELSE            reduce using rule 20 (three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .)
    WRITE           reduce using rule 20 (three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .)
    READ            reduce using rule 20 (three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .)
    $end            reduce using rule 20 (three_address_instruction -> lhs ASSIGN operand GREATEQUAL operand .)


state 56

    (21) three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .

    ID              reduce using rule 21 (three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .)
    LENGTH          reduce using rule 21 (three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .)
    IFFALSE         reduce using rule 21 (three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .)
    ELSE            reduce using rule 21 (three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .)
    WRITE           reduce using rule 21 (three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .)
    READ            reduce using rule 21 (three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .)
    $end            reduce using rule 21 (three_address_instruction -> lhs ASSIGN operand LESSEQUAL operand .)


state 57

    (22) three_address_instruction -> lhs ASSIGN operand EQUALTO operand .

    ID              reduce using rule 22 (three_address_instruction -> lhs ASSIGN operand EQUALTO operand .)
    LENGTH          reduce using rule 22 (three_address_instruction -> lhs ASSIGN operand EQUALTO operand .)
    IFFALSE         reduce using rule 22 (three_address_instruction -> lhs ASSIGN operand EQUALTO operand .)
    ELSE            reduce using rule 22 (three_address_instruction -> lhs ASSIGN operand EQUALTO operand .)
    WRITE           reduce using rule 22 (three_address_instruction -> lhs ASSIGN operand EQUALTO operand .)
    READ            reduce using rule 22 (three_address_instruction -> lhs ASSIGN operand EQUALTO operand .)
    $end            reduce using rule 22 (three_address_instruction -> lhs ASSIGN operand EQUALTO operand .)


state 58

    (23) three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .

    ID              reduce using rule 23 (three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .)
    LENGTH          reduce using rule 23 (three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .)
    IFFALSE         reduce using rule 23 (three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .)
    ELSE            reduce using rule 23 (three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .)
    WRITE           reduce using rule 23 (three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .)
    READ            reduce using rule 23 (three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .)
    $end            reduce using rule 23 (three_address_instruction -> lhs ASSIGN operand NOTEQUAL operand .)


state 59

    (24) three_address_instruction -> lhs ASSIGN operand AND operand .

    ID              reduce using rule 24 (three_address_instruction -> lhs ASSIGN operand AND operand .)
    LENGTH          reduce using rule 24 (three_address_instruction -> lhs ASSIGN operand AND operand .)
    IFFALSE         reduce using rule 24 (three_address_instruction -> lhs ASSIGN operand AND operand .)
    ELSE            reduce using rule 24 (three_address_instruction -> lhs ASSIGN operand AND operand .)
    WRITE           reduce using rule 24 (three_address_instruction -> lhs ASSIGN operand AND operand .)
    READ            reduce using rule 24 (three_address_instruction -> lhs ASSIGN operand AND operand .)
    $end            reduce using rule 24 (three_address_instruction -> lhs ASSIGN operand AND operand .)


state 60

    (25) three_address_instruction -> lhs ASSIGN operand OR operand .

    ID              reduce using rule 25 (three_address_instruction -> lhs ASSIGN operand OR operand .)
    LENGTH          reduce using rule 25 (three_address_instruction -> lhs ASSIGN operand OR operand .)
    IFFALSE         reduce using rule 25 (three_address_instruction -> lhs ASSIGN operand OR operand .)
    ELSE            reduce using rule 25 (three_address_instruction -> lhs ASSIGN operand OR operand .)
    WRITE           reduce using rule 25 (three_address_instruction -> lhs ASSIGN operand OR operand .)
    READ            reduce using rule 25 (three_address_instruction -> lhs ASSIGN operand OR operand .)
    $end            reduce using rule 25 (three_address_instruction -> lhs ASSIGN operand OR operand .)


state 61

    (5) three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .

    ID              reduce using rule 5 (three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .)
    LENGTH          reduce using rule 5 (three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .)
    IFFALSE         reduce using rule 5 (three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .)
    ELSE            reduce using rule 5 (three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .)
    WRITE           reduce using rule 5 (three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .)
    READ            reduce using rule 5 (three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .)
    $end            reduce using rule 5 (three_address_instruction -> lhs ASSIGN ID LSQUARE numlist RSQUARE .)


state 62

    (10) three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .

    ID              reduce using rule 10 (three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .)
    LENGTH          reduce using rule 10 (three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .)
    IFFALSE         reduce using rule 10 (three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .)
    ELSE            reduce using rule 10 (three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .)
    WRITE           reduce using rule 10 (three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .)
    READ            reduce using rule 10 (three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .)
    $end            reduce using rule 10 (three_address_instruction -> lhs ASSIGN ID LSQUARE NUM RSQUARE .)


state 63

    (7) numlist -> NUM COMMA . numlist
    (7) numlist -> . NUM COMMA numlist
    (8) numlist -> . NUM
    (9) numlist -> .

    NUM             shift and go to state 64
    RSQUARE         reduce using rule 9 (numlist -> .)

    numlist                        shift and go to state 65

state 64

    (7) numlist -> NUM . COMMA numlist
    (8) numlist -> NUM .

    COMMA           shift and go to state 63
    RSQUARE         reduce using rule 8 (numlist -> NUM .)


state 65

    (7) numlist -> NUM COMMA numlist .

    RSQUARE         reduce using rule 7 (numlist -> NUM COMMA numlist .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RSQUARE in state 48 resolved as shift
